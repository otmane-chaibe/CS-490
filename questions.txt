Questions.
Easy
- Write a method in Java to check if a number is even or odd in Java. Return 1 for even and 0 for odd. 
public static int evenOdd(int n){
	if (n%2==0)
		return 1;
	else 
		return 0;
}
- Write a function thirdWord to print the 3rd word in a string. Takes string s and returns the third word.
public static String thirdWord(String s){
	String[] parts;
	parts = s.split(" ");
	return parts[2];
}
- Write a function thirdLetter to print the 3rd letter in a word. Takes string s and returns the third letter.
public static String thirdLetter(String s){
	return s.charAt(2);
}
- Write a function avg to find the average of 3 integers x,y,z. Function should accept 3 ints x,y,z and return the average in double with two deci.

public static double avg(int x,int y,int z){
		double pro;
		pro=(x+y+z);
		pro=pro/3;
		pro=pro*100;
		pro=Math.round(pro);
		pro=pro/100;
		return pro;
}
- Write a funtion prod to find the product of three integers passed in as its parameters. Return the product.

public static int prod(int x,int y,int z){
	int pro;
	pro=(x*y*z);
	return pro;
}
Medium.
- Write a function sum to sum integers from 1 through n. Use a loop. Print sum.
public static int sum(int n){
	int sum=0;
	for(int i=1;i<=n;i++){
		sum=sum+i;
	}
	return sum;
}
- Write a function printChars to print first letter of the every word in a string. Use a loop. Function  will accept a string s and return a string.
public static String printChars(String s){
		String[] parts;
		String temp="";
		parts=s.split(" ");
		for(int i=0;i<parts.length;i++){
			temp=temp+parts[i].charAt(0);
		}
		return temp;
}
- Write a function numbers to print all the numbers in a string. 
public static String numbers(String s){
	String num="";
	for(char c:s.toCharArray()){
		if(Character.isDigit(c)){
			num=num+c;
		}
	}
	return num;
}
- Write Java function pal to check if a number is palindrome in Java.
public static boolean pal(int n){
	String s = Integer.toString(n);
	int i1 = 0;
	int i2 = s.length() - 1;
    	while (i2 > i1) {
        	if (s.charAt(i1) != s.charAt(i2)) {
            		return false;
        	}
        i1++;
        i2--;
    	}
    return true;
}

- Given an array of integers, write a function swap to swap two ints in the array. Hint swap(int[]a,int i,int j).
public static int[] swap(int[] a, int i, int j) {
    int c;
    c = a[i];
    a[i] = a[j];
    a[j] = c;
	return a;

 }



Hard
-Write a function sum to sum integers from 1 through nth integer. Use recursion. Return sum. Hint: public int sum(int n)
public int sum(int n) {
     if(n==0) // base case
        return 0;
     else // recursive case
        return sum(n-1) + n; 
 }

- Write a function removeDuplicates to Remove consecutive duplicates from a string recursively. Hint: public String removeDuplicates(String word)
public String removeDuplicates(String word) {
     if(word == null || word.length() <= 1)
        return word;
     else if( word.charAt(0) == word.charAt(1) )
        return removeDuplicates(word.substring(1, word.length()));
     else
        return word.charAt(0) + 
            removeDuplicates(word.substring(1, word.length()));
   }

- Write a function merge to Merge two strings that are ordered alphabetically. The result should also be alphabetical. Hint: public String merge(String first, String second)
public String merge(String first, String second) {
     if(first ==null || first.equals(""))
          return second==null? first:second;
     else if (second == null || second.equals(""))
          return first;
     else if(first.charAt(0) < second.charAt(0))
          return first.charAt(0) + merge( first.substring(1, first.length()), second);
     else
          return second.charAt(0) + merge(first, second.substring(1, second.length()));
}

- Write a funtion selectionSort that uses selection sort to sort the array of integers. Return the array. Hint: public static int[] selectionSort(int[] arr)
public static int[] selectionSort(int[] arr){
         
        for (int i = 0; i < arr.length - 1; i++)
        {
            int index = i;
            for (int j = i + 1; j < arr.length; j++)
                if (arr[j] < arr[index])
                    index = j;
      
            int smallerNumber = arr[index]; 
            arr[index] = arr[i];
            arr[i] = smallerNumber;
        }
        return arr;
    }
